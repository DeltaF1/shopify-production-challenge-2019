My design process went as follows:

Come up with a database schema to store the required information:

products
-----------
id|title|price|inventory

carts
-----------
id|cookie

cart_contents
-----------
cart_id|product_id|quantity

I chose to include the "cookie" field so that I could add some basic
session validation later on. I later codified these basic schemas in
schema.sql. My next step was to read over the problem description and
write out a description of the (mostly) RESTful API. I had some trouble
determining which verbs to use for which transfers of state (particularly
PUT vs PATCH). The following API was fleshed out, after which I made
sure that it met the problem requirements, and began implementing. I
chose to use web.py because I am most comfortable in Python, and it
seemed to be the most straightforward option for building something
barebones.

---------------------------------
API
---------------------------------

-- Retrieve a single product.
GET /product/<id>

return {
	title,
	price,
	inventory
}

-- Retrieve all products.
GET /products/?only_in_stock=<1|0>

return [
	{
		title,
		price,
		inventory
	},
	...
] for product in products where inventory > 0

-- Create a new empty cart.
POST /cart

return {
	id
}

Sets a session cookie if none is present

-- ALL FOLLOWING REQUESTS REQUIRE A MATCHING SESSION COOKIE

-- Get the contents of a shopping cart.
GET /cart/<id>

return {
	contents : [
		{
			title,
			quantity,
			price,
		}
	],
	total_price
}

-- Put an item into the cart, or increase the quantity if that item is already
-- in the cart.
PATCH /cart/<id>
body = {
	id,
	quantity
}

return {
	success
}

-- Put an item into the cart, or set the quantity for that item.
-- Differs from PATCH since it can be used to for instance remove an item
-- from the cart.
--
-- e.x. PUT /cart/<id> {id:xxx, quantity:0}
PUT /cart/<id>
body = {
	id,
	quantity
}

return {
	success
}

-- Purchase all items in the cart.
-- If any of the items are unable to be purchased,
-- the whole cart is rejected

POST /cart/<id>/complete

return {
	success,
	(optional)failed_products : [
		{
			title,
			diff_quantity
		}
	]
}

